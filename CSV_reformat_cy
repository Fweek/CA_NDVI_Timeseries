cimport cython
import sys,os,csv,datetime,string
import numpy as np
cimport numpy as np

#Set working directory
cdef str folder
folder = 'CSVConversion'
os.chdir("C:/Users\Michael/Desktop/"+folder)

#Make a new directory for the output files if it does not already exist
if not os.path.exists('Output'):
    os.makedirs('Output',)

#Set working directory
os.chdir('C:\Users\Michael\Desktop\CSVConversion\Input')

# Loop through every file in the current working directory.
for csvFilename in os.listdir('.'):
    if not csvFilename.endswith('.csv'):
        continue # skip non-csv files

    print('Modifying ' + csvFilename + '...')

    #Open the file
    fPtr = open(csvFilename)
    if fPtr is None:
      print "Error opening %s " % csvFilename
      sys.exit(1)

    #Read in the file using csv module
    rdr= csv.reader(fPtr)
    fPtr = None

    #Create container for input
    cdef list input = []

    #Keep only columns we want: DATE in column 0, NDVI in column 1, and SIMSID in column 2
    cdef list l = []
    for l in rdr:
        input.append((l[1],l[2],l[3]))

    #Remove header
    input = input[1::]

    #Find how many unique ids we have
    cdef list simsIds = []
    cdef list i = 0
    simsIds = [i[2] for i in input] #where i is the row in input and [2] is the SIMSID column

    #Get all the unique simsids and count them. This will be the number of rows for our new table
    cdef int yDim = len(np.unique(simsIds)) + 1 #adding 1 to account for row header
    print "Number of unique sims ids %d" % yDim

    # We will always have 51 columns. 5 extra + 46 timesteps
    cdef int xDim = 51

    #Create final output array
    cdef np.ndarray[np.int32_t, ndim=2] finalOutput
    finalOutput = np.ones((yDim,xDim)) * -9999.0 #fill all cells with -9999

    #Create temp output container
    cdef list tempOut = []

    #More formatting
    cdef list k
    for k in input:
        #Grab only date column
        cdef int dtStr = k[0]
        #Parse out year, month, day. Ugly code but need to get this moving...
        cdef int yr = dtStr[0:4]
        cdef int mm = dtStr[5:7]
        cdef int dd = dtStr[8:10]
        #Reformat date
        dtNum = (datetime.datetime(int(yr), int(mm), int(dd)) - datetime.datetime(1980, 1, 1)).days

        #Replace all {nd=null} values with -9999
        cdef str ndvi1 = k[1]
        cdef str ndvi2 = string.replace(ndvi1, '{nd=null}', '-9999')

        #Format NDVI to only numbers
        cdef str ndvi3 = string.replace(ndvi2, '{nd=', '')
        cdef str ndvi4 = string.replace(ndvi3, '}', '')
        tempOut.append((float(l[2]), dtNum, ndvi4))

    tempOut.sort()

    #Find how many unique dates we have
    cdef list allDates = [h[1] for h in tempOut]

    #Get all unique IDs and count them
    cdef int uniqueIds = np.unique(simsIds)
    #print uniqueIds.shape

    #Fill in the date header based on year, assuming we're looking at 2016 data
    cdef int tStart = (datetime.datetime(2016, 01, 1) - datetime.datetime(1980, 1, 1)).days
    cdef int tEnd = (datetime.datetime(2016, 12, 31) - datetime.datetime(1980, 1, 1)).days
    print tStart
    print tEnd

    cdef int indx = 0
    for i in range(tStart, tEnd, 8): #every 8th value starting at tStart
        finalOutput[0, indx+1] = i #take that value and put it in the finalOutput array at the specified index
        indx += 1 #index increases incrementally each loop

    finalOutput[1:yDim, 0] = uniqueIds

    cdef list row
    for row in range(1, yDim):  # for each row in the range of SIMs IDs
        cdef list simsId = finalOutput[row, 0]  # create variable called simsId, set it equal to the simsId in the [row, 0] position
        cdef list j
        for j in tempOut:  # then in a different list
            cdef double tempOutId = float(j[0])  # make tempOutId equal to just the SIMS ID column
            # print simsId,tempOutId
            if simsId == tempOutId:  # check to see if the two SIMS ID match up
                # Check the date and add to column
                print "IDs match", simsId, tempOutId  # if they match says so
                cdef int date = j[1] # create variables for each column
                cdef int ndvi = j[2]
                print date, ndvi
                # which column?
                cdef int col
                for col in range(5, 51):  # why 5?
                    cdef int dateTemp = int(finalOutput[0, col])  # make new date variable based on header
                    cdef int dateTemp2 = dateTemp+8
                    # print dateTemp,date
                    if dateTemp <= date < dateTemp2:
                        # Most dates won't match since the overpass can fall anywhere in between the 8 day period
                        #      Have to account for this to make the code work
                        # print "Dates match"
                        print row, col, ndvi
                        finalOutput[row, col] = ndvi

    #print finalOutput

    #Write list to CSV
    output_destination = 'C:/Users/Michael/Desktop/'+folder+'/Output/'+csvFilename
    outStrFn = 'outputFile_'
    #np.savetxt(outStrFn+'avgs.csv', finalOutput, delimiter=",",fmt='%.3f')

    np.savetxt(output_destination, finalOutput, delimiter=",",fmt='%.3f')
